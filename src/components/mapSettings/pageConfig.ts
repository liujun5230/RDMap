import {
	AREA, ATTENDANCE_AREA, BASE_STATION,
	BUILDING, CAMERA,
	DANGER_AREA, DEVICE, DEVICE_BASIC_FIELD, DISPLAY_WAY, ELECTRONIC_FENCE,
	HEAT, LAYER,
	LITTLE_MAP,
	LOCATING_OPTIMUM_AREA,
	PATROL, PIT_AREA, PO_BASIC_FIELD, POSITION_OBJECT, POWER, ROLL_CALL_AREA, SCOPE, SHOW_CAMERA_AREA, STRANGER
} from "@/components/mapSettings/optionValueKeys";
import {DEVICE_TYPES} from "@index/utils/types";

// !!!23D共用一分值保证key只有一个数字不同 需要满足命名规则 例如：history_card_replay_2d history_card_replay_3d
export enum SETTING_KEY {
	INDEX_3D = "index_3d",
	INDEX_2D = "index_2d",
	INDEX_HISTORY_3D = "index_history_3d",
	INDEX_HISTORY_2D = "index_history_2d",
	LOCATING_OPTIMUM_2D = "locating_optimum_2d",
	UP_DOWN_PIT_2D = "up_down_pit_2d",
	ROLL_CALL_2D = "roll_call_2d",
	ELECTRONIC_FENCE_2D = "electronic_fence_2d",
	ATTENDANCE_AREA_2D = "attendance_area_2d",
	PATROL_2D = "patrol_2d",
	CAMERA_2D = "camera_2d",
	DEVICE_DOOR = "device_door",
	DEVICE_POWER = "device_power",
	DEVICE_SMART_MACHINE = "device_smart_machine",
	DEVICE_SWITCH = "device_switch",
	HISTORY_CARD_REPLAY = "history_card_replay_2d",
	HISTORY_AREA_REPLAY = "history_area_replay_2d",
	HISTORY_CARD_REPLAY_3D = "history_card_replay_3d",
	HISTORY_AREA_REPLAY_3D = "history_area_replay_3d",
}

// 为什么是excludes 不是 includes 因为一开始只有首页2 3D有显示设置 连历史分布都没考虑要不一样-_-
// 首页
const INDEX_MAP_3D_EXCLUDES = [HEAT, LITTLE_MAP, DANGER_AREA, LOCATING_OPTIMUM_AREA, PATROL, [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM]];
const INDEX_MAP_2D_EXCLUDES = [LAYER];
const INDEX_HISTORY_DISTRIBUTION_2D_EXCLUDES = [STRANGER, DEVICE, DEVICE_BASIC_FIELD, LAYER, AREA, LITTLE_MAP, SCOPE];
const INDEX_HISTORY_DISTRIBUTION_3D_EXCLUDES = [HEAT, STRANGER, DEVICE, DEVICE_BASIC_FIELD, AREA, LITTLE_MAP, SCOPE];

// 定位优化区域
const LOCATING_OPTIMUM_MAP_2D_EXCLUDES = [DISPLAY_WAY, SHOW_CAMERA_AREA, BUILDING, ELECTRONIC_FENCE, ATTENDANCE_AREA, ROLL_CALL_AREA, PIT_AREA, PATROL, SCOPE, LITTLE_MAP];
// 上下井
const UP_DOWN_PIT_MAP_2D_EXCLUDES = [DISPLAY_WAY, SHOW_CAMERA_AREA, BUILDING, ELECTRONIC_FENCE, ATTENDANCE_AREA, ROLL_CALL_AREA, LOCATING_OPTIMUM_AREA, PATROL, SCOPE, LITTLE_MAP];
// 电子点名
const ROLL_CALL_MAP_2D_EXCLUDES = [DISPLAY_WAY, SHOW_CAMERA_AREA, BUILDING, ELECTRONIC_FENCE, ATTENDANCE_AREA, PIT_AREA, LOCATING_OPTIMUM_AREA, PATROL, SCOPE, LITTLE_MAP];
// 电子围栏
const ELECTRONIC_FENCE_2D_EXCLUDES = [DISPLAY_WAY, SHOW_CAMERA_AREA, BUILDING, ATTENDANCE_AREA, ROLL_CALL_AREA, PIT_AREA, LOCATING_OPTIMUM_AREA, PATROL, SCOPE, LITTLE_MAP];
// 巡检
const PATROL_2D_EXCLUDES = [DISPLAY_WAY, BUILDING, SHOW_CAMERA_AREA, ATTENDANCE_AREA, ROLL_CALL_AREA, PIT_AREA, LOCATING_OPTIMUM_AREA, ELECTRONIC_FENCE, SCOPE, LITTLE_MAP];
// 考勤
const ATTENDANCE_2D_EXCLUDES = [DISPLAY_WAY, SHOW_CAMERA_AREA, BUILDING, ROLL_CALL_AREA, PIT_AREA, LOCATING_OPTIMUM_AREA, ELECTRONIC_FENCE, PATROL, SCOPE, LITTLE_MAP];
// 摄像头
const CAMERA_2D = [DISPLAY_WAY, BUILDING, AREA, SCOPE, LITTLE_MAP];
// 设备 唯一性检测装置
const DEVICE_DOOR = [POSITION_OBJECT, PO_BASIC_FIELD, DISPLAY_WAY, BASE_STATION, CAMERA, POWER, [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], BUILDING, AREA, SCOPE, LITTLE_MAP];
// 设备 电源
const DEVICE_POWER = [POSITION_OBJECT, PO_BASIC_FIELD, DISPLAY_WAY, BASE_STATION, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], BUILDING, AREA, SCOPE, LITTLE_MAP];
// 设备 交换机
const DEVICE_SWITCH = [POSITION_OBJECT, PO_BASIC_FIELD, DISPLAY_WAY, BASE_STATION, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], POWER, [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], BUILDING, AREA, SCOPE, LITTLE_MAP];
// 设备 智能发卡一体机
const DEVICE_SMART_MACHINE = [POSITION_OBJECT, PO_BASIC_FIELD, DISPLAY_WAY, BASE_STATION, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], POWER, [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], BUILDING, AREA, SCOPE, LITTLE_MAP];
// 轨迹回放 标签回放
const HISTORY_CARD_REPLAY_EXCLUDES = [POSITION_OBJECT, DISPLAY_WAY, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], POWER, [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], LAYER, SCOPE, LITTLE_MAP];
// 轨迹回放 区域回放 像设备类型，基站类型这种用type值（number）做value的，容易重复，需要写成数组，将父节点甚至祖先结点的值显式表明，数组从左到右对应了级联从左到右，在做配置过滤时，就会利用这个数组拼接的值作为过滤条件，字符串做值的也可能重复，同理可以利用写成数组的方式解决，或者换个名字
const HISTORY_AREA_REPLAY_EXCLUDES = [STRANGER, DISPLAY_WAY, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], POWER, [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], BUILDING, SCOPE, LITTLE_MAP];
// 轨迹回放 标签回放 3d
const HISTORY_CARD_REPLAY_3D_EXCLUDES = [POSITION_OBJECT, DISPLAY_WAY, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], POWER, [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], LOCATING_OPTIMUM_AREA, PATROL, SCOPE, LITTLE_MAP];
// 轨迹回放 区域回放 3d
const HISTORY_AREA_REPLAY_3D_EXCLUDES = [STRANGER, DISPLAY_WAY, CAMERA, [DEVICE, DEVICE_TYPES.DOOR], POWER, [DEVICE, DEVICE_TYPES.SWITCH], [DEVICE, DEVICE_TYPES.SMART_CARD_MACHINE], [DEVICE, DEVICE_TYPES.TRAFFIC_LIGHT], [DEVICE, DEVICE_TYPES.LIGHT_ALARM], BUILDING, LOCATING_OPTIMUM_AREA, PATROL, SCOPE, LITTLE_MAP];

const config_map = {
	[SETTING_KEY.INDEX_3D]: INDEX_MAP_3D_EXCLUDES,
	[SETTING_KEY.INDEX_2D]: INDEX_MAP_2D_EXCLUDES,
	[SETTING_KEY.INDEX_HISTORY_3D]: INDEX_HISTORY_DISTRIBUTION_3D_EXCLUDES,
	[SETTING_KEY.INDEX_HISTORY_2D]: INDEX_HISTORY_DISTRIBUTION_2D_EXCLUDES,
	[SETTING_KEY.LOCATING_OPTIMUM_2D]: LOCATING_OPTIMUM_MAP_2D_EXCLUDES,
	[SETTING_KEY.UP_DOWN_PIT_2D]: UP_DOWN_PIT_MAP_2D_EXCLUDES,
	[SETTING_KEY.ROLL_CALL_2D]: ROLL_CALL_MAP_2D_EXCLUDES,
	[SETTING_KEY.ELECTRONIC_FENCE_2D]: ELECTRONIC_FENCE_2D_EXCLUDES,
	[SETTING_KEY.ATTENDANCE_AREA_2D]: ATTENDANCE_2D_EXCLUDES,
	[SETTING_KEY.PATROL_2D]: PATROL_2D_EXCLUDES,
	[SETTING_KEY.CAMERA_2D]: CAMERA_2D,
	[SETTING_KEY.DEVICE_SWITCH]: DEVICE_SWITCH,
	[SETTING_KEY.DEVICE_DOOR]: DEVICE_DOOR,
	[SETTING_KEY.DEVICE_SMART_MACHINE]: DEVICE_SMART_MACHINE,
	[SETTING_KEY.DEVICE_POWER]: DEVICE_POWER,
	[SETTING_KEY.HISTORY_CARD_REPLAY]: HISTORY_CARD_REPLAY_EXCLUDES,
	[SETTING_KEY.HISTORY_AREA_REPLAY]: HISTORY_AREA_REPLAY_EXCLUDES,
	[SETTING_KEY.HISTORY_CARD_REPLAY_3D]: HISTORY_CARD_REPLAY_3D_EXCLUDES,
	[SETTING_KEY.HISTORY_AREA_REPLAY_3D]: HISTORY_AREA_REPLAY_3D_EXCLUDES,
};

export const getMapSettingConfig = (key: SETTING_KEY) => {
	return config_map[key] || [];
};
